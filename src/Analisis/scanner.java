/* The following code was generated by JFlex 1.7.0 */

package Analisis;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Analisis.error;
import Analisis.lexema;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.flex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int comentarioSimple = 2;
  public static final int comentarioMulti = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  3, 50,  1,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1, 21,  9,  0,  0,  0, 20, 15, 25, 26, 10, 17,  0, 18,  5, 16, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  0, 44, 24, 22, 23,  0, 
     0, 33, 35, 31, 41, 43, 45, 40, 32, 28,  6,  6, 37, 46, 29, 36, 
    47,  6, 34, 39, 30, 42,  6,  6,  6,  6,  6,  0,  0,  0,  0,  6, 
     0, 33, 35, 31, 41, 43, 45, 40, 32, 28,  6,  6, 37, 46, 29, 36, 
    47,  6, 34, 39, 30, 42,  6,  6,  6,  6,  6, 48, 19, 49,  0,  0, 
     0,  0,  0,  0,  0, 50,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  8,  0,  0,  0,  0,  0,  0,  0,  8,  0,  0,  0,  8,  0,  0, 
     0,  8,  0,  8,  0,  0,  0,  0,  0,  0,  8,  0,  0,  0,  0,  0, 
     0,  0, 11,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0, 11,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\2\1\1\7\1\10\1\11\3\1\1\12\1\13\1\14"+
    "\1\15\1\16\1\1\4\5\1\1\2\5\1\17\1\5"+
    "\1\20\1\21\6\0\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\2\0\5\5\1\0\3\5\1\31\1\32"+
    "\1\0\1\33\1\0\2\22\1\34\1\0\1\34\4\5"+
    "\1\0\3\5\2\0\1\5\1\35\1\36\1\37\1\0"+
    "\2\5\1\0\1\5\2\0\1\5\1\0\2\5\2\40"+
    "\2\0\1\5\2\41\1\42\1\0\1\5\2\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\63\0\63\0\63\0\146\0\231\0\314"+
    "\0\377\0\63\0\u0132\0\u0165\0\u0198\0\63\0\63\0\u01cb"+
    "\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\63\0\63\0\u02fd"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\63"+
    "\0\u0495\0\63\0\63\0\u04c8\0\314\0\u04fb\0\u052e\0\u0561"+
    "\0\u0594\0\u05c7\0\63\0\63\0\63\0\63\0\63\0\63"+
    "\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f"+
    "\0\u0792\0\u07c5\0\u07f8\0\u04c8\0\63\0\u082b\0\63\0\u085e"+
    "\0\u0891\0\63\0\63\0\u08c4\0\231\0\u08f7\0\u092a\0\u095d"+
    "\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5"+
    "\0\231\0\231\0\231\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4"+
    "\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\63\0\231"+
    "\0\u0d59\0\u0d8c\0\u0dbf\0\63\0\231\0\231\0\u0df2\0\u0e25"+
    "\0\63\0\231";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\3\1\7\1\10\1\3"+
    "\1\11\1\12\1\13\3\3\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\7\1\32\1\33\3\7\1\34\2\7"+
    "\1\35\1\36\1\7\1\37\2\7\1\40\1\41\2\7"+
    "\1\42\1\43\70\0\1\6\1\44\61\0\1\7\1\0"+
    "\1\7\1\45\24\0\12\7\1\0\5\7\1\0\3\7"+
    "\13\0\1\7\52\0\12\46\1\0\50\46\14\0\1\47"+
    "\46\0\12\50\1\0\50\50\12\0\1\51\5\0\1\52"+
    "\65\0\1\53\63\0\1\54\64\0\1\55\62\0\1\56"+
    "\62\0\1\57\62\0\1\60\71\0\1\61\20\0\1\62"+
    "\10\0\1\7\1\0\1\7\1\45\24\0\1\7\1\63"+
    "\10\7\1\0\5\7\1\0\1\7\1\64\1\7\7\0"+
    "\1\7\1\0\1\7\1\45\24\0\6\7\1\65\3\7"+
    "\1\0\5\7\1\0\3\7\7\0\1\7\1\0\1\7"+
    "\1\45\24\0\4\7\1\66\5\7\1\0\5\7\1\0"+
    "\3\7\7\0\1\7\1\0\1\7\1\45\24\0\10\7"+
    "\1\67\1\7\1\0\5\7\1\0\3\7\41\0\1\70"+
    "\30\0\1\7\1\0\1\7\1\45\24\0\2\7\1\71"+
    "\7\7\1\0\5\7\1\0\3\7\7\0\1\7\1\0"+
    "\1\7\1\45\24\0\10\7\1\72\1\7\1\0\5\7"+
    "\1\0\3\7\7\0\1\7\1\0\1\7\1\45\24\0"+
    "\5\7\1\73\4\7\1\0\5\7\1\0\3\7\7\0"+
    "\1\74\56\0\11\46\1\75\51\46\15\0\1\76\45\0"+
    "\17\50\1\77\43\50\12\51\1\100\50\51\2\52\1\101"+
    "\1\102\57\52\36\0\1\103\103\0\1\104\7\0\1\7"+
    "\1\0\1\7\1\45\24\0\2\7\1\105\7\7\1\0"+
    "\5\7\1\0\3\7\7\0\1\7\1\0\1\7\1\45"+
    "\24\0\12\7\1\0\5\7\1\0\2\7\1\106\7\0"+
    "\1\7\1\0\1\7\1\45\24\0\12\7\1\0\3\7"+
    "\1\107\1\7\1\0\3\7\7\0\1\7\1\0\1\7"+
    "\1\45\24\0\5\7\1\110\4\7\1\0\5\7\1\0"+
    "\3\7\7\0\1\7\1\0\1\7\1\45\24\0\10\7"+
    "\1\111\1\7\1\0\5\7\1\0\3\7\45\0\1\112"+
    "\24\0\1\7\1\0\1\7\1\45\24\0\6\7\1\113"+
    "\3\7\1\0\5\7\1\0\3\7\7\0\1\7\1\0"+
    "\1\7\1\45\24\0\12\7\1\0\3\7\1\114\1\7"+
    "\1\0\3\7\7\0\1\7\1\0\1\7\1\45\24\0"+
    "\11\7\1\115\1\0\5\7\1\0\3\7\3\0\12\116"+
    "\1\0\50\116\12\51\1\100\5\51\1\102\42\51\3\0"+
    "\1\102\121\0\1\117\24\0\1\7\1\0\1\7\1\45"+
    "\24\0\6\7\1\120\3\7\1\0\5\7\1\0\3\7"+
    "\7\0\1\7\1\0\1\7\1\45\24\0\12\7\1\0"+
    "\4\7\1\121\1\0\3\7\7\0\1\7\1\0\1\7"+
    "\1\45\24\0\6\7\1\122\3\7\1\0\5\7\1\0"+
    "\3\7\7\0\1\7\1\0\1\7\1\45\24\0\11\7"+
    "\1\123\1\0\5\7\1\0\3\7\36\0\2\124\32\0"+
    "\1\7\1\0\1\7\1\45\23\0\1\124\1\125\11\7"+
    "\1\0\5\7\1\0\3\7\7\0\1\7\1\0\1\7"+
    "\1\45\24\0\7\7\1\126\2\7\1\0\5\7\1\0"+
    "\3\7\7\0\1\7\1\0\1\7\1\45\24\0\12\7"+
    "\1\127\1\130\4\7\1\0\3\7\3\0\13\116\1\131"+
    "\47\116\33\0\2\132\32\0\1\7\1\0\1\7\1\45"+
    "\23\0\1\132\1\133\11\7\1\0\5\7\1\0\3\7"+
    "\40\0\1\134\31\0\1\7\1\0\1\7\1\45\24\0"+
    "\1\7\1\135\10\7\1\0\5\7\1\0\3\7\7\0"+
    "\1\7\1\0\1\7\1\45\24\0\11\7\1\136\1\0"+
    "\5\7\1\0\3\7\56\0\1\137\13\0\1\7\1\0"+
    "\1\7\1\45\24\0\12\7\1\0\4\7\1\140\1\0"+
    "\3\7\3\0\13\116\1\131\1\141\46\116\56\0\1\142"+
    "\10\0\1\7\1\0\1\7\1\45\24\0\12\7\1\0"+
    "\5\7\1\0\1\7\1\143\1\7\53\0\1\144\16\0"+
    "\1\7\1\0\1\7\1\45\24\0\12\7\1\0\1\7"+
    "\1\145\3\7\1\0\3\7\7\0\1\7\1\0\1\7"+
    "\1\45\24\0\12\7\1\0\4\7\1\146\1\0\3\7"+
    "\3\0\13\116\1\131\2\116\1\75\44\116\33\0\2\147"+
    "\32\0\1\7\1\0\1\7\1\45\23\0\1\147\1\150"+
    "\11\7\1\0\5\7\1\0\3\7\45\0\1\151\24\0"+
    "\1\7\1\0\1\7\1\45\24\0\6\7\1\152\3\7"+
    "\1\0\5\7\1\0\3\7\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3672];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\3\11\4\1\1\11\3\1\2\11\6\1"+
    "\2\11\10\1\1\11\1\1\2\11\6\0\1\1\6\11"+
    "\2\0\5\1\1\0\4\1\1\11\1\0\1\11\1\0"+
    "\1\1\2\11\1\0\5\1\1\0\3\1\2\0\4\1"+
    "\1\0\2\1\1\0\1\1\2\0\1\1\1\0\2\1"+
    "\1\11\1\1\2\0\1\1\1\11\2\1\1\0\1\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<error> listaErrores = new ArrayList(); // Lista para almacenar errores.
    public ArrayList<lexema> listaLexemas = new ArrayList(); // Lista para almacenar el flujo de palabras (tokens).

    public void adderror(int linea, int columna, String valor)
    {        
        listaErrores.add(new error("Lexico",valor, linea, columna));
    }

    public void addLexema(String tipo, String valor, int linea, int columna)
    {        
        listaLexemas.add(new lexema(tipo, valor, linea, columna));	            
    } 
    public void Imprimir(String cadena)
    {
        System.out.println(cadena);
    }   
 



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new Symbol(sym.EOF);    
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caracter ilegal: " + yytext()+" Linea : "+yyline +" Columna: "+yychar); 
                adderror(yyline, yychar, yytext());
            } 
            // fall through
          case 36: break;
          case 2: 
            { //Imprimir("Salto de linea");
            } 
            // fall through
          case 37: break;
          case 3: 
            { yychar=0;
            } 
            // fall through
          case 38: break;
          case 4: 
            { addLexema("Entero", yytext(), yyline, yychar);  	        
            return new Symbol(sym.entero, yychar, yyline, Integer.parseInt(yytext()));
            } 
            // fall through
          case 39: break;
          case 5: 
            { addLexema("Identificador", yytext(), yyline, yychar);  	        
            return new Symbol(sym.identificador, yychar, yyline, yytext().toLowerCase());
            } 
            // fall through
          case 40: break;
          case 6: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.multi, yychar, yyline, yytext());
            } 
            // fall through
          case 41: break;
          case 7: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.div, yychar, yyline, yytext());
            } 
            // fall through
          case 42: break;
          case 8: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.suma, yychar, yyline, yytext());
            } 
            // fall through
          case 43: break;
          case 9: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.resta, yychar, yyline, yytext());
            } 
            // fall through
          case 44: break;
          case 10: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.igual, yychar, yyline, yytext());
            } 
            // fall through
          case 45: break;
          case 11: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.mayor, yychar, yyline, yytext());
            } 
            // fall through
          case 46: break;
          case 12: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.menor, yychar, yyline, yytext());
            } 
            // fall through
          case 47: break;
          case 13: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.pari, yychar, yyline, yytext());
            } 
            // fall through
          case 48: break;
          case 14: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.pard, yychar, yyline, yytext());
            } 
            // fall through
          case 49: break;
          case 15: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.puntocoma, yychar, yyline, yytext());
            } 
            // fall through
          case 50: break;
          case 16: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.llaveI, yychar, yyline, yytext());
            } 
            // fall through
          case 51: break;
          case 17: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.llaveD, yychar, yyline, yytext());
            } 
            // fall through
          case 52: break;
          case 18: 
            { Imprimir(yytext());
            } 
            // fall through
          case 53: break;
          case 19: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.or, yychar, yyline, yytext());
            } 
            // fall through
          case 54: break;
          case 20: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.and, yychar, yyline, yytext());
            } 
            // fall through
          case 55: break;
          case 21: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.desigual, yychar, yyline, yytext());
            } 
            // fall through
          case 56: break;
          case 22: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.igualigual, yychar, yyline, yytext());
            } 
            // fall through
          case 57: break;
          case 23: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.mayorigual, yychar, yyline, yytext());
            } 
            // fall through
          case 58: break;
          case 24: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.menorigual, yychar, yyline, yytext());
            } 
            // fall through
          case 59: break;
          case 25: 
            { addLexema("Decimal", yytext(), yyline, yychar);  	        
            return new Symbol(sym.decimal, yychar, yyline, Double.parseDouble(yytext()));
            } 
            // fall through
          case 60: break;
          case 26: 
            { addLexema("Cadena", yytext(), yyline, yychar);  	        
            return new Symbol(sym.cadena, yychar, yyline, yytext().substring(1, yytext().length()-1));
            } 
            // fall through
          case 61: break;
          case 27: 
            { addLexema("caracter", yytext(), yyline, yychar);  	        
            return new Symbol(sym.caracter, yychar, yyline, yytext().substring(1, yytext().length()-1));
            } 
            // fall through
          case 62: break;
          case 28: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tint, yychar, yyline, yytext());
            } 
            // fall through
          case 63: break;
          case 29: 
            { addLexema("true", yytext(), yyline, yychar);  	        
            return new Symbol(sym.verdadero, yychar, yyline, true);
            } 
            // fall through
          case 64: break;
          case 30: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.tchar, yychar, yyline, yytext());
            } 
            // fall through
          case 65: break;
          case 31: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.tbool, yychar, yyline, yytext());
            } 
            // fall through
          case 66: break;
          case 32: 
            { addLexema("false", yytext(), yyline, yychar);  	        
            return new Symbol(sym.falso, yychar, yyline, false);
            } 
            // fall through
          case 67: break;
          case 33: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.tstring, yychar, yyline, yytext());
            } 
            // fall through
          case 68: break;
          case 34: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.tdouble, yychar, yyline, yytext());
            } 
            // fall through
          case 69: break;
          case 35: 
            { addLexema("reservada", yytext(), yyline, yychar);  	        
            return new Symbol(sym.imprimir, yychar, yyline, yytext());
            } 
            // fall through
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
